{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["arr","array","check","tictactoe","id","count","document","getElementById","disabled","matchArray","length","push","X","innerHTML","newArr","filter","a","includes","other","parseInt","Math","round","random","map","num","mar","style","display","App","className","item","onClick","key","window","location","reload","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qOAGIA,G,UAAM,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAC/BC,EAAQ,GACRC,EAAQ,GAENC,EAAY,SAACC,GACjB,IAAIC,EAAQ,EACZC,SAASC,eAAeH,GAAII,UAAW,EACvC,IAAIC,EAAa,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACnE,GAAIR,EAAMS,OAAS,EAAG,CACpBT,EAAMU,KAAKP,GACXF,EAAMS,KAAK,CAAEC,EAAGR,IAChBE,SAASC,eAAeH,GAAIS,UAAY,IACxC,IAAIC,EAASd,EAAIe,QAAO,SAAAC,GAAC,OAAKf,EAAMgB,SAASD,MACzCE,EAAQJ,EAAOG,SAASb,EAAK,GAAMA,EAAK,EAAKU,EAAOK,SAASC,KAAKC,MAAMD,KAAKE,UAAYR,EAAOJ,OAAS,MAC7GR,EAAMqB,KAAI,SAAAC,GAgBR,OAfAA,EAAIZ,GAAKP,IACLA,EAAQ,GACVI,EAAWc,KAAI,SAAAE,GAUb,OATkD,OAA9CnB,SAASC,eAAekB,EAAI,IAAIZ,WAAsBP,SAASC,eAAekB,EAAI,IAAIZ,YAAcP,SAASC,eAAekB,EAAI,IAAIZ,WAAkE,IAArDP,SAASC,eAAekB,EAAI,IAAIZ,UAAUH,OAC7LQ,EAAQO,EAAI,GAEyC,OAA9CnB,SAASC,eAAekB,EAAI,IAAIZ,WAAsBP,SAASC,eAAekB,EAAI,IAAIZ,YAAcP,SAASC,eAAekB,EAAI,IAAIZ,WAAkE,IAArDP,SAASC,eAAekB,EAAI,IAAIZ,UAAUH,OAClMQ,EAAQO,EAAI,GAEyC,OAA9CnB,SAASC,eAAekB,EAAI,IAAIZ,WAAsBP,SAASC,eAAekB,EAAI,IAAIZ,YAAcP,SAASC,eAAekB,EAAI,IAAIZ,WAAkE,IAArDP,SAASC,eAAekB,EAAI,IAAIZ,UAAUH,SAClMQ,EAAQO,EAAI,IAEP,QAGJ,QAELP,IACFjB,EAAMU,KAAKO,GACXZ,SAASC,eAAeW,GAAOV,UAAW,EAC1CF,SAASC,eAAeW,GAAOL,UAAY,KAG/CJ,EAAWc,KAAI,SAAAE,GAMb,OALInB,SAASC,eAAekB,EAAI,IAAIZ,UAAUH,OAAS,GAAKJ,SAASC,eAAekB,EAAI,IAAIZ,YAAcP,SAASC,eAAekB,EAAI,IAAIZ,WAAaP,SAASC,eAAekB,EAAI,IAAIZ,YAAcP,SAASC,eAAekB,EAAI,IAAIZ,YACnOP,SAASC,eAAe,QAAQmB,MAAMC,QAAU,QAChDrB,SAASC,eAAe,YAAYmB,MAAMC,QAAU,QACpDrB,SAASC,eAAe,YAAYM,UAAaP,SAASC,eAAekB,EAAI,IAAIZ,UAAY,QAExF,SAmBIe,MAhBf,WACE,OACE,6BACE,mDACA,yBAAKC,UAAU,YACZ7B,EAAIuB,KAAI,SAAAO,GAAI,OACX,4BAAQC,QAAS,kBAAM5B,EAAU2B,IAAO1B,GAAI0B,EAAME,IAAKF,QAG3D,4BAAQD,UAAU,UAAUE,QAAS,kBAAME,OAAOC,SAASC,WAA3D,cACA,0BAAM/B,GAAG,OAAOsB,MAAO,CAAEC,QAAS,QAAUI,QAAS,kBAAME,OAAOC,SAASC,YAC3E,0BAAM/B,GAAG,WAAWsB,MAAO,CAAEC,QAAS,QAAUI,QAAS,kBAAME,OAAOC,SAASC,cCjDjEC,QACW,cAA7BH,OAAOC,SAASG,UAEe,UAA7BJ,OAAOC,SAASG,UAEhBJ,OAAOC,SAASG,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASC,eAAe,SD2H3C,kBAAmBkC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3c150515.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet array = []\nlet check = []\n\nconst tictactoe = (id) => {\n  let count = 0\n  document.getElementById(id).disabled = true\n  let matchArray = ['123', '456', '789', '147', '258', '369', '159', '357']\n  if (array.length < 9) {\n    array.push(id)\n    check.push({ X: id })\n    document.getElementById(id).innerHTML = 'X'\n    let newArr = arr.filter(a => !array.includes(a))\n    let other = newArr.includes(id + 1) ? (id + 1) : newArr[parseInt(Math.round(Math.random() * (newArr.length - 1)))]\n    check.map(num => {\n      num.X && count++\n      if (count > 0) {\n        matchArray.map(mar => {\n          if (document.getElementById(mar[0]).innerHTML !== null && document.getElementById(mar[0]).innerHTML === document.getElementById(mar[1]).innerHTML && document.getElementById(mar[2]).innerHTML.length === 0) {\n            other = mar[2]\n          }\n          else if (document.getElementById(mar[0]).innerHTML !== null && document.getElementById(mar[0]).innerHTML === document.getElementById(mar[2]).innerHTML && document.getElementById(mar[1]).innerHTML.length === 0) {\n            other = mar[1]\n          }\n          else if (document.getElementById(mar[1]).innerHTML !== null && document.getElementById(mar[1]).innerHTML === document.getElementById(mar[2]).innerHTML && document.getElementById(mar[0]).innerHTML.length === 0) {\n            other = mar[0]\n          }\n          return null\n        })\n      }\n      return null\n    })\n    if (other) {\n      array.push(other)\n      document.getElementById(other).disabled = true\n      document.getElementById(other).innerHTML = 'O'\n    }\n  }\n  matchArray.map(mar => {\n    if (document.getElementById(mar[0]).innerHTML.length > 0 && document.getElementById(mar[0]).innerHTML === document.getElementById(mar[1]).innerHTML && document.getElementById(mar[0]).innerHTML === document.getElementById(mar[2]).innerHTML) {\n      document.getElementById('none').style.display = 'block'\n      document.getElementById('noneText').style.display = 'block'\n      document.getElementById('noneText').innerHTML = (document.getElementById(mar[0]).innerHTML + ' WON')\n    }\n    return null\n  })\n}\nfunction App() {\n  return (\n    <div>\n      <h1>My Tic Tac Toe Game</h1>\n      <div className='grid-box'>\n        {arr.map(item =>\n          <button onClick={() => tictactoe(item)} id={item} key={item} />\n        )}\n      </div>\n      <button className='refresh' onClick={() => window.location.reload()}>RESET GAME</button>\n      <span id='none' style={{ display: 'none' }} onClick={() => window.location.reload()} />\n      <span id='noneText' style={{ display: 'none' }} onClick={() => window.location.reload()} />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}